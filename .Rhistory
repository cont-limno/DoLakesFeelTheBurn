# single variable plot of regions side by side
plot_var = 'summer_ppt'
gradient_var = 'wyppt_PRISM'
par(mfrow=c(1,2))
plot(PRISM_gradient_df_UM[,plot_var]~PRISM_gradient_df_UM[,gradient_var],
main=paste0('Midwest'), pch=20, col='red',
xlim=c(600, 1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(PRISM_gradient_df_UM[,plot_var]~ PRISM_gradient_df_UM[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(PRISM_gradient_df_UM[,plot_var], PRISM_gradient_df_UM[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(PRISM_gradient_df_UM[,plot_var], PRISM_gradient_df_UM[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(PRISM_gradient_df_UM[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
plot(PRISM_gradient_df_NE[,plot_var]~PRISM_gradient_df_NE[,gradient_var],
main=paste0('Northeast'), pch=20, col='dodgerblue',
xlim=c(600,1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(PRISM_gradient_df_NE[,plot_var]~ PRISM_gradient_df_NE[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(PRISM_gradient_df_NE[,plot_var], PRISM_gradient_df_NE[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(PRISM_gradient_df_NE[,plot_var], PRISM_gradient_df_NE[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(PRISM_gradient_df_NE[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
cor(PRISM_gradient_df$wyppt_PRISM, PRISM_gradient_df$summer_ppt)
par(mfrow=c(1,1))
## UM - summer tmax sensitvity predictors
# Create data frame for UM with variables of interest
# summer_tmax sensitivity, lake area, lake max depth, forest 100 m buffer, mean summer tmax
t1_df <- data.frame(lagoslakeid=as.character(PRISM_gradient_df_UM$lagoslakeid), summer_tmax = PRISM_gradient_df_UM$summer_tmax,
summer_tmax_PRISM = PRISM_gradient_df_UM$summer_tmax_PRISM)
t2_df <- data.frame(buffer100_gradient_df_UM$total_forest_pct_1992, lagoslakeid=as.character(buffer100_gradient_df_UM$lagoslakeid))
t3_df <- data.frame(depth_gradient2_df_UM$maxdepth, lagoslakeid=as.character(depth_gradient2_df_UM$lagoslakeid))
t4_df <- data.frame(iws_gradient_df_UM_areaclean$iws_lakeareaha, lagoslakeid=as.character(iws_gradient_df_UM_areaclean$lagoslakeid))
#t5_df <- data.frame(color_mean$colort, lagoslakeid=as.character(color_mean$lagoslakeid)) #color omitted due to low sample size
t6_df <- data.frame(TP_mean$TP, lagoslakeid=as.character(TP_mean$lagoslakeid))
t7_df <- data.frame(chla_mean$chla, lagoslakeid=as.character(chla_mean$lagoslakeid))
RF_UM_df <- left_join(t1_df, t2_df, by='lagoslakeid')
RF_UM_df <- left_join(RF_UM_df, t3_df, by='lagoslakeid')
RF_UM_df <- left_join(RF_UM_df, t4_df, by='lagoslakeid')
#RF_UM_df <- left_join(RF_UM_df, t5_df, by='lagoslakeid') #not using color in UM due to low number of lakes with data
RF_UM_df <- left_join(RF_UM_df, t6_df, by='lagoslakeid')
RF_UM_df <- left_join(RF_UM_df, t7_df, by='lagoslakeid')
colnames(RF_UM_df) <- c('lagoslakeid','summer_tmax','summer_tmax_PRISM','forest100m','maxdepth','lakeareaha','TP','chla')
RF_UM_df <- RF_UM_df[complete.cases(RF_UM_df), ]
set.seed(999)
RF_UM_tmax <- randomForest(summer_tmax ~ forest100m + summer_tmax_PRISM + TP + chla + maxdepth + lakeareaha,
data=RF_UM_df, ntree=500, importance=T)
print(RF_UM_tmax)
importance(RF_UM_tmax, type=1)
importance(RF_UM_tmax, type=2) #MSE for regression
# partial dependency plots
imp <- importance(RF_UM_tmax)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(RF_UM_tmax, RF_UM_df, impvar[i], xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]), ylim=c(-1,1), las=1)
}
t1_df <- data.frame(lagoslakeid=PRISM_gradient_df_NE$lagoslakeid, summer_ppt = PRISM_gradient_df_NE$summer_ppt,
summer_ppt_PRISM = PRISM_gradient_df_NE$summer_ppt_PRISM)
t2_df <- data.frame(wetland_pct = iws_conn_gradient_df_NE$iws_wl_allwetlandsdissolved_overlapping_area_pct,
lake_pct = iws_conn_gradient_df_NE$iws_lakes_overlapping_area_pct,
stream_density = iws_conn_gradient_df_NE$iws_streamdensity_streams_density_mperha,
lagoslakeid=iws_conn_gradient_df_NE$lagoslakeid)
t3_df <- data.frame(maxdepth = depth_gradient2_df_NE$maxdepth, lagoslakeid=depth_gradient2_df_NE$lagoslakeid)
t4_df <- data.frame(lakeareaha = iws_gradient_df_NE_areaclean$iws_lakeareaha, lagoslakeid=iws_gradient_df_NE_areaclean$lagoslakeid,
iws_lake_ratio = iws_gradient_df_NE_areaclean$iws_lake_ratio)
t5_df <- data.frame(lagoslakeid= iws_gradient_lulc_df_NE$lagoslakeid, total_forest_pct = iws_gradient_lulc_df_NE$total_forest_pct_1992,
total_ag_pct = iws_gradient_lulc_df_NE$total_ag_pct_1992,
slope_mean = iws_gradient_lulc_df_NE$iws_slope_mean)
t6_df <- data.frame(lagoslakeid = hu12_gradient_df_NE$lagoslakeid, runoff=hu12_gradient_df_NE$hu12_runoff_mean,
baseflow = hu12_gradient_df_NE$hu12_baseflowindex_mean,
groundwater = hu12_gradient_df_NE$hu12_groundwaterrecharge_mean)
#t7_df <- data.frame(colort=color_mean$colort, lagoslakeid=as.character(color_mean$lagoslakeid)) #color omitted due to low sample size
t8_df <- data.frame(TP=TP_mean$TP, lagoslakeid=as.character(TP_mean$lagoslakeid))
t9_df <- data.frame(chla=chla_mean$chla, lagoslakeid=as.character(chla_mean$lagoslakeid))
RF_NE_df <- left_join(t1_df, t2_df, by='lagoslakeid')
RF_NE_df <- left_join(RF_NE_df, t3_df, by='lagoslakeid')
RF_NE_df <- left_join(RF_NE_df, t4_df, by='lagoslakeid')
RF_NE_df <- left_join(RF_NE_df, t5_df, by='lagoslakeid')
RF_NE_df <- left_join(RF_NE_df, t6_df, by='lagoslakeid')
#RF_NE_df <- left_join(RF_NE_df, t7_df, by='lagoslakeid')
RF_NE_df <- left_join(RF_NE_df, t8_df, by='lagoslakeid')
RF_NE_df <- left_join(RF_NE_df, t9_df, by='lagoslakeid')
RF_NE_df <- RF_NE_df[complete.cases(RF_NE_df), ]
# not using lake pct in RF analysis because has so many zeros
set.seed(888)
RF_NE_ppt <- randomForest(summer_ppt ~ lakeareaha + summer_ppt_PRISM + maxdepth + wetland_pct +
stream_density + iws_lake_ratio + total_forest_pct + total_ag_pct + slope_mean +
runoff + groundwater + chla + TP , data=RF_NE_df, ntree=500, importance=T)
print(RF_NE_ppt)
importance(RF_NE_ppt, type=1)
importance(RF_NE_ppt, type=2) #MSE for regression
# plot1 is %Increase in MSE, with larger increases for a given variable indicating that variable is relatively more important
# high %IncMSE means without that variable, that much predictive capacity is lost
# a neg value therefore means you are better off not including that variable
varImpPlot(RF_NE_ppt, main='Variable importance, summer ppt sensitivity - NE')
# diagnostic for how many trees to run? Processing is done in seconds, so I don't see major downside to large # of trees unless error increases
plot(RF_NE_ppt, xlim=c(0,500))
# partial dependency plots
imp <- importance(RF_NE_ppt)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(RF_NE_ppt, RF_NE_df, impvar[i], xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]), ylim=c(-1,1), las=1)
}
# single variable plot of regions side by side
plot_var = 'summer_ppt'
gradient_var = 'wyppt_PRISM'
par(mfrow=c(1,2))
plot(PRISM_gradient_df_UM[,plot_var]~PRISM_gradient_df_UM[,gradient_var],
main=paste0('Midwest'), pch=20, col='red',
xlim=c(600, 1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(PRISM_gradient_df_UM[,plot_var]~ PRISM_gradient_df_UM[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(PRISM_gradient_df_UM[,plot_var], PRISM_gradient_df_UM[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(PRISM_gradient_df_UM[,plot_var], PRISM_gradient_df_UM[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(PRISM_gradient_df_UM[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
plot(PRISM_gradient_df_NE[,plot_var]~PRISM_gradient_df_NE[,gradient_var],
main=paste0('Northeast'), pch=20, col='dodgerblue',
xlim=c(600,1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(PRISM_gradient_df_NE[,plot_var]~ PRISM_gradient_df_NE[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(PRISM_gradient_df_NE[,plot_var], PRISM_gradient_df_NE[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(PRISM_gradient_df_NE[,plot_var], PRISM_gradient_df_NE[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(PRISM_gradient_df_NE[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
cor(PRISM_gradient_df$wyppt_PRISM, PRISM_gradient_df$summer_ppt)
par(mfrow=c(1,1))
### single plot
par(mfrow=c(1,1))
plot(PRISM_gradient_df[,plot_var]~PRISM_gradient_df[,gradient_var],
main=paste0('Northeast'), pch=20, col='black',
xlim=c(600,1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(PRISM_gradient_df[,plot_var]~ PRISM_gradient_df[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(PRISM_gradient_df[,plot_var], PRISM_gradient_df[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(PRISM_gradient_df[,plot_var], PRISM_gradient_df[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(PRISM_gradient_df[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
### single plot
par(mfrow=c(1,1))
plot(PRISM_gradient_df[,plot_var]~PRISM_gradient_df[,gradient_var],
main=paste0('Full dataset'), pch=20, col='black',
xlim=c(600,1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(PRISM_gradient_df[,plot_var]~ PRISM_gradient_df[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(PRISM_gradient_df[,plot_var], PRISM_gradient_df[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(PRISM_gradient_df[,plot_var], PRISM_gradient_df[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(PRISM_gradient_df[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
lm <- lm(PRISM_gradient_df[,plot_var]~ PRISM_gradient_df[,gradient_var])
summary(lm)
names(PRISM_gradient_df)
str(PRISM_gradient_df$Region)
plot(PRISM_gradient_df[,plot_var]~PRISM_gradient_df[,gradient_var],
main=paste0('Full dataset'), pch=20, col=as.factor(PRISM_gradient_df$Region),
xlim=c(600,1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
PRISM_gradient_df$Color <- ifelse(PRISM_gradient_df$Region == 'NE', 'dodgerblue', 'red')
plot(PRISM_gradient_df[,plot_var]~PRISM_gradient_df[,gradient_var],
main=paste0('Full dataset'), pch=20, col=PRISM_gradient_df$Color,
xlim=c(600,1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
### single plot
par(mfrow=c(1,1))
PRISM_gradient_df$Color <- ifelse(PRISM_gradient_df$Region == 'NE', 'dodgerblue', 'red')
plot(PRISM_gradient_df[,plot_var]~PRISM_gradient_df[,gradient_var],
main=paste0('Full dataset'), pch=20, col=PRISM_gradient_df$Color,
xlim=c(600,1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(PRISM_gradient_df[,plot_var]~ PRISM_gradient_df[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(PRISM_gradient_df[,plot_var], PRISM_gradient_df[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(PRISM_gradient_df[,plot_var], PRISM_gradient_df[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(PRISM_gradient_df[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
plot_var = 'summer_ppt'
gradient_var = 'total_ag_pct_1992' #'total_ag_pct_1992', 'iws_slope_mean', 'total_forest_pct_1992'
par(mfrow=c(1,2))
plot(iws_gradient_lulc_df_UM[,plot_var]~iws_gradient_lulc_df_UM[,gradient_var],
main=paste0(limno_var, ' Upper Midwest'), pch=20, col='red',
xlim=c(), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(iws_gradient_lulc_df_UM[,plot_var]~ iws_gradient_lulc_df_UM[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(iws_gradient_lulc_df_UM[,plot_var], iws_gradient_lulc_df_UM[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(iws_gradient_lulc_df_UM[,plot_var], iws_gradient_lulc_df_UM[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(iws_gradient_lulc_df_UM[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
plot(iws_gradient_lulc_df_NE[,plot_var]~iws_gradient_lulc_df_NE[,gradient_var],
main=paste0(limno_var, ' Northeast'), pch=20, col='dodgerblue',
xlim=c(), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(iws_gradient_lulc_df_NE[,plot_var]~ iws_gradient_lulc_df_NE[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(iws_gradient_lulc_df_NE[,plot_var], iws_gradient_lulc_df_NE[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(iws_gradient_lulc_df_NE[,plot_var], iws_gradient_lulc_df_NE[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(iws_gradient_lulc_df_NE[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
# single variable plot of regions side by side
plot_var = 'summer_ppt'
gradient_var = 'total_ag_pct_1992' #'total_ag_pct_1992', 'iws_slope_mean', 'total_forest_pct_1992'
par(mfrow=c(1,2))
plot(iws_gradient_lulc_df_UM[,plot_var]~iws_gradient_lulc_df_UM[,gradient_var],
main=paste0('Midwest'), pch=20, col='red',
xlim=c(), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(iws_gradient_lulc_df_UM[,plot_var]~ iws_gradient_lulc_df_UM[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(iws_gradient_lulc_df_UM[,plot_var], iws_gradient_lulc_df_UM[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(iws_gradient_lulc_df_UM[,plot_var], iws_gradient_lulc_df_UM[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(iws_gradient_lulc_df_UM[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
plot(iws_gradient_lulc_df_NE[,plot_var]~iws_gradient_lulc_df_NE[,gradient_var],
main=paste0('Northeast'), pch=20, col='dodgerblue',
xlim=c(), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(iws_gradient_lulc_df_NE[,plot_var]~ iws_gradient_lulc_df_NE[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(iws_gradient_lulc_df_NE[,plot_var], iws_gradient_lulc_df_NE[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(iws_gradient_lulc_df_NE[,plot_var], iws_gradient_lulc_df_NE[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(iws_gradient_lulc_df_NE[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
plot_var = 'summer_ppt'
gradient_var = 'total_ag_pct_1992' #'total_ag_pct_1992', 'iws_slope_mean', 'total_forest_pct_1992'
par(mfrow=c(1,2))
plot(iws_gradient_lulc_df_UM[,plot_var]~iws_gradient_lulc_df_UM[,gradient_var],
main=paste0('Midwest'), pch=20, col='red',
xlim=c(0,100), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(iws_gradient_lulc_df_UM[,plot_var]~ iws_gradient_lulc_df_UM[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(iws_gradient_lulc_df_UM[,plot_var], iws_gradient_lulc_df_UM[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(iws_gradient_lulc_df_UM[,plot_var], iws_gradient_lulc_df_UM[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(iws_gradient_lulc_df_UM[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
plot(iws_gradient_lulc_df_NE[,plot_var]~iws_gradient_lulc_df_NE[,gradient_var],
main=paste0('Northeast'), pch=20, col='dodgerblue',
xlim=c(0,100), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(iws_gradient_lulc_df_NE[,plot_var]~ iws_gradient_lulc_df_NE[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(iws_gradient_lulc_df_NE[,plot_var], iws_gradient_lulc_df_NE[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(iws_gradient_lulc_df_NE[,plot_var], iws_gradient_lulc_df_NE[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(iws_gradient_lulc_df_NE[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
### single plot
par(mfrow=c(1,1))
PRISM_gradient_df$Color <- ifelse(PRISM_gradient_df$Region == 'NE', 'dodgerblue', 'red')
plot(PRISM_gradient_df[,plot_var]~PRISM_gradient_df[,gradient_var],
main=paste0('Full dataset'), pch=20, col=PRISM_gradient_df$Color,
xlim=c(600,1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(PRISM_gradient_df[,plot_var]~ PRISM_gradient_df[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(PRISM_gradient_df[,plot_var], PRISM_gradient_df[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(PRISM_gradient_df[,plot_var], PRISM_gradient_df[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(PRISM_gradient_df[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
plot_var = 'summer_ppt'
gradient_var = 'wyppt_PRISM'
### single plot
par(mfrow=c(1,1))
PRISM_gradient_df$Color <- ifelse(PRISM_gradient_df$Region == 'NE', 'dodgerblue', 'red')
plot(PRISM_gradient_df[,plot_var]~PRISM_gradient_df[,gradient_var],
main=paste0('Full dataset'), pch=20, col=PRISM_gradient_df$Color,
xlim=c(600,1600), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(PRISM_gradient_df[,plot_var]~ PRISM_gradient_df[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(PRISM_gradient_df[,plot_var], PRISM_gradient_df[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(PRISM_gradient_df[,plot_var], PRISM_gradient_df[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(PRISM_gradient_df[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
#### sensitivity to summer precipitation vs. total local watershed agriculture ####
# single variable plot of regions side by side
plot_var = 'summer_ppt'
gradient_var = 'total_ag_pct_1992' #'total_ag_pct_1992', 'iws_slope_mean', 'total_forest_pct_1992'
par(mfrow=c(1,2))
plot(iws_gradient_lulc_df_UM[,plot_var]~iws_gradient_lulc_df_UM[,gradient_var],
main=paste0('Midwest'), pch=20, col='red',
xlim=c(0,100), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(iws_gradient_lulc_df_UM[,plot_var]~ iws_gradient_lulc_df_UM[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(iws_gradient_lulc_df_UM[,plot_var], iws_gradient_lulc_df_UM[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(iws_gradient_lulc_df_UM[,plot_var], iws_gradient_lulc_df_UM[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(iws_gradient_lulc_df_UM[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
plot(iws_gradient_lulc_df_NE[,plot_var]~iws_gradient_lulc_df_NE[,gradient_var],
main=paste0('Northeast'), pch=20, col='dodgerblue',
xlim=c(0,100), ylim=c(-1,1), ylab=paste0('sensitivity of ', limno_var, ' to ', plot_var),
xlab=gradient_var)
abline(0,0, lty=2)
# create linear model to calculate coef (slope)
lm <- lm(iws_gradient_lulc_df_NE[,plot_var]~ iws_gradient_lulc_df_NE[,gradient_var])
slope <- round(lm$coefficients[2], digits=3)
abline(lm, lty=1)
cortest <- cor.test(iws_gradient_lulc_df_NE[,plot_var], iws_gradient_lulc_df_NE[,gradient_var], alternative = 'two.sided',
method='pearson',conf.level=(1-pvalue_cutoff)) #get pvalue from correlation so it can be plotted
plot_pval <- cortest$p.value
legend('topright', bty='n', legend=paste0('r = ',round(cor(iws_gradient_lulc_df_NE[,plot_var], iws_gradient_lulc_df_NE[,gradient_var],
use='pairwise.complete.obs'), digits=3)))
legend('topleft', bty='n', legend=paste0('p = ', round(plot_pval, digits=3)))
legend('bottomleft', bty='n', legend=paste0('coef = ', slope))
legend('bottomright', bty='n', legend=paste0('n = ', length(na.omit(iws_gradient_lulc_df_NE[,gradient_var]))))
mtext(side=3, paste0('gradient variable = ',gradient_var, ', climate variable = ', plot_var), cex=0.75)
setwd("C:/Users/FWL/Documents/DoLakesFeelTheBurn")
lakes_4ha_pts <- shapefile("C:/Ian_GIS/LAGOS_US_4ha_lakes/LAGOS_US_All_Lakes_4ha_pts/LAGOS_US_All_Lakes_4ha_pts.shp")
library(raster)
lakes_4ha_pts <- shapefile("C:/Ian_GIS/LAGOS_US_4ha_lakes/LAGOS_US_All_Lakes_4ha_pts/LAGOS_US_All_Lakes_4ha_pts.shp")
states_shp <- spTransform(shapefile("C:/Ian_GIS/cb_2016_us_state_500k/lower48.shp"), CRSobj = crs(lakes_4ha_pts))
first_year = 1984
last_year = 2015
burned_lagoslakeid <- read.csv("ExportedData/Burned1500mBuffs.csv")[,2] #reads 2nd column (lagoslakeid)
# calculate % watershed burned by lagoslakeid
percent_watershed_burned_cumulative <- function(lagoslakeid){
#lagoslakeid: lake ID to use
fire_history <- read.csv(paste0(getwd(),"ExportedData//lake_fire_history/buffer1500m/buffer1500m_fire_",
lagoslakeid,".csv"))
total_pct_cum <- max(fire_history$ZoneTotalBurned_pct_cum)
WF_pct_cum <- suppressWarnings(max(fire_history$wildfire_pct_cum))
Rx_pct_cum <- suppressWarnings(max(fire_history$Rxfire_pct_cum))
WLFU_pct_cum <- suppressWarnings(max(fire_history$WLFU_pct_cum))
Unknown_pct_cum <- suppressWarnings(max(fire_history$unknown_fire_pct_cum))
output <- data.frame(lagoslakeid=lagoslakeid, total_pct_cum=total_pct_cum, WF_pct_cum=WF_pct_cum, Rx_pct_cum=Rx_pct_cum,
WLFU_pct_cum=WLFU_pct_cum, Unknown_pct_cum=Unknown_pct_cum)
return(output)
}
output_list <- list() #create blank list to be filled by loop
for (i in 1:length(burned_lagoslakeid)){
xx <- percent_watershed_burned_cumulative(lagoslakeid=burned_lagoslakeid[i])
output_list[[i]] <- xx
xx <- NULL
}
percent_watershed_burned_cumulative <- function(lagoslakeid){
#lagoslakeid: lake ID to use
fire_history <- read.csv(paste0(getwd(),"ExportedData/lake_fire_history/buffer1500m/buffer1500m_fire_",
lagoslakeid,".csv"))
total_pct_cum <- max(fire_history$ZoneTotalBurned_pct_cum)
WF_pct_cum <- suppressWarnings(max(fire_history$wildfire_pct_cum))
Rx_pct_cum <- suppressWarnings(max(fire_history$Rxfire_pct_cum))
WLFU_pct_cum <- suppressWarnings(max(fire_history$WLFU_pct_cum))
Unknown_pct_cum <- suppressWarnings(max(fire_history$unknown_fire_pct_cum))
output <- data.frame(lagoslakeid=lagoslakeid, total_pct_cum=total_pct_cum, WF_pct_cum=WF_pct_cum, Rx_pct_cum=Rx_pct_cum,
WLFU_pct_cum=WLFU_pct_cum, Unknown_pct_cum=Unknown_pct_cum)
return(output)
}
for (i in 1:length(burned_lagoslakeid)){
xx <- percent_watershed_burned_cumulative(lagoslakeid=burned_lagoslakeid[i])
output_list[[i]] <- xx
xx <- NULL
}
fire_history <- read.csv(paste0(getwd(),"/ExportedData/lake_fire_history/buffer1500m/buffer1500m_fire_",
lagoslakeid,".csv"))
percent_watershed_burned_cumulative <- function(lagoslakeid){
#lagoslakeid: lake ID to use
fire_history <- read.csv(paste0(getwd(),"/ExportedData/lake_fire_history/buffer1500m/buffer1500m_fire_",
lagoslakeid,".csv"))
total_pct_cum <- max(fire_history$ZoneTotalBurned_pct_cum)
WF_pct_cum <- suppressWarnings(max(fire_history$wildfire_pct_cum))
Rx_pct_cum <- suppressWarnings(max(fire_history$Rxfire_pct_cum))
WLFU_pct_cum <- suppressWarnings(max(fire_history$WLFU_pct_cum))
Unknown_pct_cum <- suppressWarnings(max(fire_history$unknown_fire_pct_cum))
output <- data.frame(lagoslakeid=lagoslakeid, total_pct_cum=total_pct_cum, WF_pct_cum=WF_pct_cum, Rx_pct_cum=Rx_pct_cum,
WLFU_pct_cum=WLFU_pct_cum, Unknown_pct_cum=Unknown_pct_cum)
return(output)
}
for (i in 1:length(burned_lagoslakeid)){
xx <- percent_watershed_burned_cumulative(lagoslakeid=burned_lagoslakeid[i])
output_list[[i]] <- xx
xx <- NULL
}
pct_burned_lake <- do.call(rbind, output_list)
View(pct_burned_lake)
pct_burned_shp <- merge(lakes_4ha_pts, pct_burned_lake, by.x='lagoslakei', by.y='lagoslakeid', all.x=F)
